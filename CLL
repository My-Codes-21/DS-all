#include <stdio.h>
#include <stdlib.h>

struct Node {
    int e;              
    struct Node* next;    
};

typedef struct Node* PtrToNode;
typedef PtrToNode List;
typedef PtrToNode Position;

void Insert(int x, List l, Position p) {
    Position TmpCell = (struct Node*)malloc(sizeof(struct Node));
    if (TmpCell == NULL) {
        printf("Memory out of space\n");
    } else {
        TmpCell->e = x;
        TmpCell->next = p->next;
        p->next = TmpCell;
    }
}


int isLast(Position p, List l) {
    return (p->next == l);
}


Position FindPrevious(int x, List l) {
    Position p = l;
    while (p->next != l && p->next->e != x)
        p = p->next;
    return p;
}


Position Find(int x, List l) {
    Position p = l->next;
    while (p != l && p->e != x)
        p = p->next;
    return p;
}


void Delete(int x, List l) {
    Position p = FindPrevious(x, l);
    if (!isLast(p, l)) {
        Position TmpCell = p->next;
        p->next = TmpCell->next;
        free(TmpCell);
    } else {
        printf("Element does not exist!!!\n");
    }
}


void Display(List l) {
    Position p = l->next;
    printf("The list elements are: \n");

    if (p == l) {
        printf("List is empty!\n");
        return;
    }

    printf("HEAD -> ");
    while (p != l) {
        printf("[ %d ] -> ", p->e);
        p = p->next;
    }
    printf("HEAD (circular)\n");
}


int main() {
    int x, pos, ch, i;
    List l;

    
    l = (struct Node*)malloc(sizeof(struct Node));
    if (l == NULL) {
        printf("Memory allocation failed!\n");
        return -1;
    }
    l->next = l;  // Self-loop for the head node

    List p = l;
    printf("CIRCULAR LINKED LIST IMPLEMENTATION\n");

    do {
        printf("\n\n1. INSERT\t2. DELETE\t3. FIND\t4. PRINT\t5. QUIT\n\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                p = l;
                printf("Enter the element to be inserted: ");
                scanf("%d", &x);
                printf("Enter the position (starting from 1): ");
                scanf("%d", &pos);

                for (i = 1; i < pos && p->next != l; i++) {
                    p = p->next;
                }
                Insert(x, l, p);
                break;
            case 2:
                printf("Enter the element to be deleted: ");
                scanf("%d", &x);
                Delete(x, l);
                break;
            case 3:
                printf("Enter the element to be searched: ");
                scanf("%d", &x);
                p = Find(x, l);
                if (p == l)
                    printf("Element does not exist!!!\n");
                else
                    printf("Element exists!!!\n");
                break;
            case 4:
                Display(l);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
                break;
        }
    } while (ch != 5);

    
    while (l->next != l) {
        Delete(l->next->e, l);
    }
    free(l);

    return 0;
}
