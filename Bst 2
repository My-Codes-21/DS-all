#include <stdio.h>
#include <stdlib.h>

// Define the node structure
struct node {
    int key;
    struct node *left, *right;
};

// Create a new node
struct node *newNode(int item) {
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

// Perform inorder traversal of the BST
void inorder(struct node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d -> ", root->key);
        inorder(root->right);
    }
}

// Insert a new key into the BST
struct node *insert(struct node *node, int key) {
    if (node == NULL) 
        return newNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);

    return node;
}

// Find the node with the minimum value
struct node *minValueNode(struct node *node) {
    struct node *current = node;

    // Find the leftmost leaf
    while (current && current->left != NULL)
        current = current->left;

    return current;
}

// Delete a node from the BST
struct node *deleteNode(struct node *root, int key) {
    if (root == NULL) 
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL) {
            struct node *temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct node *temp = root->left;
            free(root);
            return temp;
        }

        struct node *temp = minValueNode(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }

    return root;
}

// Menu for BST operations
void menu() {
    printf("\nBST Operations\n");
    printf("1. Insert\n2. Delete\n3. Display (Inorder Traversal)\n4. Exit\n");
}

// Main function
int main() {
    struct node *root = NULL;
    int choice, value;

    while (1) {
        menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to insert: ");
            scanf("%d", &value);
            root = insert(root, value);
            break;

        case 2:
            printf("Enter value to delete: ");
            scanf("%d", &value);
            root = deleteNode(root, value);
            break;

        case 3:
            printf("Inorder traversal: ");
            inorder(root);
            printf("\n");
            break;

        case 4:
            while (root != NULL) {
                root = deleteNode(root, root->key);
            }
            exit(0);

        default:
            printf("Invalid choice!\n");
        }
    }

    return 0;
}
